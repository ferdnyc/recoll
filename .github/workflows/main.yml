name: build

on: push

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest]
        config:
          - { qt-version: 6.4.3, cmake-args: '-DRECOLL_QT6_BUILD=1' }
          - { qt-version: 5.15.2, cmake-args: '' }

    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v2

    - name: Configure environment
      id: env_config
      run: |
        QT_VERSION=${{ matrix.config.qt-version }}
        QT_MAJOR_VERSION=${QT_VERSION:0:1}

        # Compute command-line options for CMake
        CMAKE_ARGS="${{ matrix.config.cmake-args }}"
        if [ "${{ matrix.os == 'macos' }}" = "true" ]; then
          CMAKE_ARGS="${CMAKE_ARGS} \
            -Dlibxml2_DIR=`brew --prefix`/opt/libxml2/lib/cmake/"
        fi
        echo cmake_args="${CMAKE_ARGS}" >> $GITHUB_OUTPUT

        # Compute set of archives/modules for install-qt-action
        if [ ${QT_MAJOR_VERSION} -lt 6 ]; then
          echo qt_modules="qtwebengine" >> $GITHUB_OUTPUT
          echo qt_archives="qtbase qtdeclarative qtlocation \
            qttranslations qttools qtwebchannel qtwebview" >> $GITHUB_OUTPUT
        else
          echo qt_modules="qtpositioning qtwebengine qtwebview \
            qtwebchannel" >> $GITHUB_OUTPUT
          echo qt_archives="qtbase qtdeclarative qttranslations \
            qttools" >> $GITHUB_OUTPUT
        fi


    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.config.qt-version }}
        modules: ${{ steps.env_config.outputs.qt_modules }}
        archives: ${{ steps.env_config.outputs.qt_archives }}
        cache: 'true'

    - name: Install dependencies (macOS)
      id: macos_brew
      run: |
        brew update
        brew install --overwrite ninja xapian libxml2
      # brew list --versions > brew_installed.txt


    - name: CMake build
      run: |
        cmake -G Ninja -B _build -S src \
          -DCMAKE_INSTALL_PREFIX=`pwd`/dist \
          ${{ steps.env_config.outputs.cmake_args }}
        cmake --build _build
        cmake --install _build
